import i2cimport ad7991import timeimport lwm2m"""This script is based on myFirstADC.py and motoMonitor.  It reads a channel on a AD7991 to read a signal from aTMP35 Analog Temperature Sensor and a HIH-4010  Humidity sensor.  The AD7991 has four channels regestered with the Labbook Server.In this.  Data sheetfor the Temperature sensor:http://www.analog.com/media/en/technical-documentation/data-sheets/TMP35_36_37.pdffor the Humidity sensor:http://www.farnell.com/datasheets/1847249.pdf?_ga=2.182601891.42879061.1496745854-604683412.1482494350"""# Instantiate the deviceadc = ad7991.device( i2c.device("/dev/i2c-1"), 0)# Set the number of ADC channels#adc.set_channel(ad7991.TWO_CHAN)adc.set_channel(ad7991.FOUR_CHAN)#Create the device on the labBook server#the server accepts list of the same sensor type# my_temp = lwm2m.create_IPSO_Temperature()# my_humid =lwm2m.create_IPSO_Humidity()my_temp = [    lwm2m.create_IPSO_Temperature(),	lwm2m.create_IPSO_Temperature(),            lwm2m.create_IPSO_Temperature(),                            ]my_humid =[    lwm2m.create_IPSO_Humidity(),	lwm2m.create_IPSO_Humidity()]#Register the device with the LabBook server#They are registered on the LabBook server separatelylwm2m.register_object_id(lambda: my_temp, lwm2m.id_IPSO_Temperature)lwm2m.register_object_id(lambda: my_humid, lwm2m.id_IPSO_Humidity)#convert the digital output to a mV signaldef adc_to_mv(level, adc_bit = 12, vref=5000):    #AD7991 is 12 bit resoluton    #vref is 5V    full_scale = float(2**adc_bit)    mv = float(vref*(level/full_scale))    print('mv = ', mv)    # print('vref = ', vref)    # print('Level = ', level)    # print('Full scale = ', full_scale)    return mv####################### Temperature Object#set some fixed parameters from the given sensor used and send to the LabBook#these values were found in the sensor's data sheet:# for the TMP35:# my_temp_range_min = 0# my_temp_range_max  = 100# for the TMP36# my_temp_range_min = -40# my_temp_range_max  = 125## for i in number_of_sensors:#     my_temp[i][lwm2m.IPSO_Temperature_Min_Range_Value] = my_temp_range_min ##< Min Range Value; R; float#     my_temp[i][lwm2m.IPSO_Temperature_Max_Range_Value] = my_temp_range_max ##< Max Range Value; R; float##     # the sensor outputs a voltage that can be expressed in several units given calibration data#     my_temp[i][lwm2m.IPSO_Temperature_Sensor_Units] = "C"  ##< Sensor Units; R; stringdef mvolt_to_C(mv):    T_in_C = (((mv) - 500) / 10)  # the 15 is a 'fudge' calibration factor #TODO fix this    return T_in_C# #TODO add min and max value capture# def minmax_capture(value):#     if value1 <= value1_min:#         value1_min = value1#         my_temp[lwm2m.IPSO_Temperature_Min_Measured_Value] = mvolt_to_C(value1_min)##     else value1 => value1_max:#         value1_max = value1#         my_temp[lwm2m.IPSO_Temperature_Max_Measured_Value] = mvolt_to_C(value1_Max)#  End Temperature ####################################### Start Humidity Sensor#For the HIH-4010 sensor:IPSO_Humidity_Min_Measured_Value = 0             ##< Min Measured Value; R; floatIPSO_Humidity_Max_Measured_Value = 100           ##< Max Measured Value; R; floatIPSO_Humidity_Sensor_Units = "%RH"              ##< Sensor Units; R; string"""Durring the measurements:     IPSO_Humidity_Sensor_Value: float(),            ##< Sensor Value; R;        Voltage output (1st order curve fit)     VOUT= mvolt = (VSUPPLY)(0.0062(sensor RH) + 0.16), typical at 25 ºC        RH = (mvolt/5 -0.16)/0.0062     Temperature compensation:    True RH = (Sensor RH)/(1.0546 – 0.00216T), T in ºC        So:"""def mvolt_to_humid(mv, vsupply=5000):    humid_in_RH = (((mv/vsupply) -0.16)/0.0062)    print('Humid_in_RH '+ humid_in_RH)    return humid_in_RHdef RH_temper_comp(indicated_RH, temper):    true_RH = indicated_RH / (1.0546 - 0.00216 * temper)    return true_RHTempList = [] Index = 0    IndexTotal = 10    for i in range(IndexTotal):        TempList += [0]"""    IPSO_Humidity_Min_Range_Value: str(),           ##< Min Range Value; R; string    IPSO_Humidity_Max_Range_Value: float(),         ##< Max Range Value; R; float"""value1_min = 0value1_max = 0counter = 0#in this section the data is read from the sensor.  Note at this point there is# no relationship between the channels being read on the sensor and the channels on the LabBookwhile True:    channel = 0    # Get the value for channel 0    channel0, value0 = adc.get_level()    mv = adc_to_mv(value0)    temperature_0 = mvolt_to_C(mv)    print ('Channel0 = ' + channel0 + ' Temperature value0 = ' + temperature_0)    channel = 1    # Get the value for channel 1    channel1, value1 = adc.get_level()    mv = adc_to_mv(value1)    humidity_1 = mvolt_to_humid(mv)    print ('Channel1 = ' + channel1 + ' Humidity value1 = ' + humidity_1)    channel = 2    # Get the value for channel 2    channel2, value2 = adc.get_level()    mv = adc_to_mv(value2)    temperature_2 = mvolt_to_C(mv)    print ('Channel2 = ' + channel2 + ' Temperature value2 = ' + temperature_2)    channel = 3    # Get the value for channel 3    channel3, value3 = adc.get_level()    mv = adc_to_mv(value3)    humidity_3 = mvolt_to_humid(mv)    print ('Channel3 = ' + channel3 + ' Humidity value3 = ' + humidity_3)    if counter > (IndexTotal):        channel = 4        # Get the value for channel 4        channel4, value4 = adc.get_level()        mv = adc_to_mv(value4)        TempList[Index] = temperature_0        Index = Index + 1        if Index == IndexTotal:            Index = 0	    IndexAdd = 0	    TotalTemp = 0        for i in range (IndexTotal):			TotalTemp = TotalTemp + TempList(IndexAdd)			IndexAdd = IndexAdd + 1                	AverageTemperature = (TotalTemp / IndexTotal)						                    print ('Channel4 = ' + channel4 + ' Average Temperature value = ' + AverageTemperature)            #associate the data read from the sensor and the LabBook server channels# Update device value to the server    # for i in range(0,number_of_sensors):    #     my_temp[i][lwm2m.IPSO_Temperature_Sensor_Value] = mvolt_to_C(value'+i))    # my_temp[lwm2m.IPSO_Temperature_Sensor_Value] = temperature_0    # my_humid[lwm2m.IPSO_Humidity_Sensor_Value] = humidity_1    my_temp[0][lwm2m.IPSO_Temperature_Sensor_Value] = temperature_0    my_humid[0][lwm2m.IPSO_Humidity_Sensor_Value] = humidity_1    my_temp[1][lwm2m.IPSO_Temperature_Sensor_Value] = temperature_2    my_humid[1][lwm2m.IPSO_Humidity_Sensor_Value] = humidity_3    my_temp[2][lwm2m.IPSO_Temperature_Sensor_Value] = AverageTemperature    print ( 'Counter = ' + counter )    counter = counter + 1    # Allow time for the loop    time.sleep(1)# Destroy the devicedel adc